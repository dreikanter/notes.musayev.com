<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alex Musayev Notes</title>
    <link>https://notes.musayev.com</link>
    <atom:link href="https://notes.musayev.com/feed.xml" rel="self" type="application/rss+xml" />
    <description></description>
    
    <item>
      <title>The 512KB Club</title>
      <link>https://notes.musayev.com/20230819_4462/doherty-threshold</link>
      <guid>20230819_4462</guid>
      <description><![CDATA[<p>Responsive UI is one of the essential attributes of quality software.</p>

<p>Good apps, sites, and services don&#39;t make you wait. And this is why assets bloat in the recent web history royally sucks.</p>

<p>The situation is not going to change anytime soon. Though when it is up to me, I always mind web page performance, as I was one of the end-users.</p>

<p>It won&#39;t &quot;change the world.&quot; But it will make the user experience a little better. Performance is good developer karma.</p>

<p>If you have a choice, please don&#39;t make users wait. 400 ms is a buttload of time to display a web page.</p>

<p>This site joined <a href="https://512kb.club">512kb.club</a> today. It&#39;s mostly a symbolic gesture. Not a petition or a campaign of any kind, god forbid.</p>

<p><a href="https://gtmetrix.com/reports/notes.musayev.com/RKCsJuw5/"><img src="e2e5ea9bb4b54258815218560c78f832.jpg" alt="" title=""></a></p>

<p>References:</p>

<ul>
<li><a href="https://lawsofux.com/doherty-threshold/">Laws of UX: Doherty Threshold</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/Performance/How_long_is_too_long">Recommended Web Performance Timings: How long is too long?</a> at <a href="https://developer.mozilla.org/">developer.mozilla.org</a></li>
<li><a href="https://512kb.club">512kb.club</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Add directory to existing Sublime Text window</title>
      <link>https://notes.musayev.com/20230819_4459/add-directory-to-existing-sublime-text-window</link>
      <guid>20230819_4459</guid>
      <description><![CDATA[<p>I created couple of very simple command line aliases today, and I like them both very much.</p>

<p>This one introduce <code>s</code> command that opens current directory in a new Sublime Text window:</p>
<div class="highlight"><pre class="highlight shell"><code><span class="nb">alias </span><span class="nv">s</span><span class="o">=</span><span class="s2">"subl ."</span>
</code></pre></div>
<p>And this one does the same thing, but it will add current directory to an existing Sublime Text window if it is already open:</p>
<div class="highlight"><pre class="highlight shell"><code><span class="nb">alias </span><span class="nv">ss</span><span class="o">=</span><span class="s2">"subl --add ."</span>
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>Stubbing environment variables in RSpec</title>
      <link>https://notes.musayev.com/20230818_4452/rspec-stub-environment-variables</link>
      <guid>20230818_4452</guid>
      <description><![CDATA[<p>To test code based on some <a href="https://12factor.net/config">environment variables configuration</a>, you usually need a way to define environment variables on an individual test case level and be sure this configuration won&#39;t leak from test to test.</p>

<p>In this scenario, RSpec&#39;s <a href="https://github.com/rspec/rspec-mocks#method-stubs">method stubbing</a> comes in handy:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="c1"># spec/support/env_helpers.rb</span>
<span class="k">module</span> <span class="nn">EnvHelpers</span>
  <span class="k">def</span> <span class="nf">stub_env</span><span class="p">(</span><span class="n">variable_name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="n">allow</span><span class="p">(</span><span class="no">ENV</span><span class="p">).</span><span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:[]</span><span class="p">).</span><span class="nf">and_call_original</span>
    <span class="n">allow</span><span class="p">(</span><span class="no">ENV</span><span class="p">).</span><span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:[]</span><span class="p">).</span><span class="nf">with</span><span class="p">(</span><span class="n">variable_name</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="n">allow</span><span class="p">(</span><span class="no">ENV</span><span class="p">).</span><span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:fetch</span><span class="p">).</span><span class="nf">and_call_original</span>
    <span class="n">allow</span><span class="p">(</span><span class="no">ENV</span><span class="p">).</span><span class="nf">to</span> <span class="n">receive</span><span class="p">(</span><span class="ss">:fetch</span><span class="p">).</span><span class="nf">with</span><span class="p">(</span><span class="n">variable_name</span><span class="p">).</span><span class="nf">and_return</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="no">RSpec</span><span class="p">.</span><span class="nf">configure</span> <span class="p">{</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span> <span class="n">config</span><span class="p">.</span><span class="nf">include</span> <span class="nb">self</span> <span class="p">}</span>
<span class="k">end</span>
</code></pre></div>
<p>Require this module from <code>spec/spec_helper.rb</code> for new helpers availability in the specs:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="nb">require_relative</span> <span class="s2">"./support/env_helpers"</span>
</code></pre></div>
<p>Usage example with custom configuration file in a Rails project:</p>
<div class="highlight"><pre class="highlight yaml"><code><span class="c1"># config/external_api.yml</span>
<span class="na">development</span><span class="pi">:</span>
  <span class="na">api_key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">non_secret_api_key"</span>
<span class="na">test</span><span class="pi">:</span>
  <span class="na">api_key</span><span class="pi">:</span> <span class="s">&lt;%= ENV["API_KEY"] %&gt;</span>
<span class="na">production</span><span class="pi">:</span>
  <span class="na">api_key</span><span class="pi">:</span> <span class="s">&lt;%= ENV["API_KEY"] %&gt;</span>
</code></pre></div>
<p>The spec:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="c1"># specs/configuration/external_api_spec.rb</span>
<span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="s2">"external api configuration"</span> <span class="k">do</span>
  <span class="n">subject</span><span class="p">(</span><span class="ss">:configuration</span><span class="p">)</span> <span class="p">{</span> <span class="no">Rails</span><span class="p">.</span><span class="nf">application</span><span class="p">.</span><span class="nf">config_for</span><span class="p">(</span><span class="s2">"external_api"</span><span class="p">)</span> <span class="p">}</span>

  <span class="n">context</span> <span class="s2">"with sample configuration"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="n">stub_env</span><span class="p">(</span><span class="s2">"API_KEY"</span><span class="p">,</span> <span class="s2">"test_api_key"</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">configuration</span><span class="p">.</span><span class="nf">api_key</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"test_api_key"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"with no configuration"</span> <span class="k">do</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">configuration</span><span class="p">.</span><span class="nf">api_key</span><span class="p">).</span><span class="nf">to</span> <span class="n">be_nil</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"with direct environment variables access"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="p">{</span> <span class="n">stub_env</span><span class="p">(</span><span class="s2">"SAMPLE"</span><span class="p">,</span> <span class="s2">"value"</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="no">ENV</span><span class="p">[</span><span class="s2">"SAMPLE"</span><span class="p">]).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"value"</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="no">ENV</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"SAMPLE"</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"value"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://github.com/rspec/rspec-mocks#method-stubs"><code>rspec-mocks</code> gem</a></li>
<li><a href="https://12factor.net/config">The Twelve-Factor App: Store config in the environment</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Fixing ActiveRecord::UnknownMigrationVersionError</title>
      <link>https://notes.musayev.com/20230815_4443/fixing-activerecord-unknownmigrationversionerror</link>
      <guid>20230815_4443</guid>
      <description><![CDATA[<p>Usual cause: deleting a Rails migration file without a rollback.</p>

<p>Error message example:</p>
<div class="highlight"><pre class="highlight plaintext"><code>ActiveRecord::UnknownMigrationVersionError:
No migration with version number 20230815162103.
</code></pre></div>
<p>That means Rails can&#39;t find a migration file matching specific record in the <code>schema_migrations</code> table.</p>

<p>To fix this error, open DB console:</p>
<div class="highlight"><pre class="highlight plaintext"><code>rails dbconsole
</code></pre></div>
<p>Drop the missing migration:</p>
<div class="highlight"><pre class="highlight sql"><code><span class="k">delete</span> <span class="k">from</span> <span class="n">schema_migrations</span> <span class="k">where</span> <span class="k">version</span> <span class="o">=</span> <span class="s1">'20230815162103'</span><span class="p">;</span>
</code></pre></div>
<p>Type <code>quit</code> to exit.</p>

<p>Done!</p>

<p>Tracking missing migration:</p>
<div class="highlight"><pre class="highlight plaintext"><code>$ bin/rails db:migrate:status
...
up     20230801199444  Create users table
up     20230801223219  Create Messages table
up     20230802211438  ********** NO FILE **********
up     20230802210508  Update users table
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://edgeguides.rubyonrails.org/active_record_migrations.html#old-migrations">Active Record Migrations - Old Migrations</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Insert current date in Sublime Text</title>
      <link>https://notes.musayev.com/20230814_4434/insert-current-date-sublime-text</link>
      <guid>20230814_4434</guid>
      <description><![CDATA[<p>Open <a href="https://www.sublimetext.com/docs/packages.html">packages directory</a>: Quick menu → <code>Preferences: Browse Packages</code></p>

<p>Create <code>User/insert_date.py</code></p>
<div class="highlight"><pre class="highlight python"><code><span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">import</span> <span class="n">sublime_plugin</span>


<span class="k">class</span> <span class="nc">InsertDateCommand</span><span class="p">(</span><span class="n">sublime_plugin</span><span class="p">.</span><span class="n">TextCommand</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">edit</span><span class="p">):</span>
        <span class="n">timestamp_str</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">datetime</span><span class="p">.</span><span class="nf">now</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y-%m-%d:</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="nf">sel</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="n">edit</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="nf">begin</span><span class="p">(),</span> <span class="n">timestamp_str</span><span class="p">)</span>
</code></pre></div>
<p>Add new key binding to the keymap file: Quick menu → <code>Preferences: Key Bindings</code></p>
<div class="highlight"><pre class="highlight json"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"keys"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"super+k"</span><span class="p">,</span><span class="w"> </span><span class="s2">"super+t"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"command"</span><span class="p">:</span><span class="w"> </span><span class="s2">"insert_date"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>This example defines <kbd>Cmd</kbd>+<kbd>K</kbd>, <kbd>Cmd</kbd>+<kbd>T</kbd> sequence to call the new command.</p>

<p><img src="d5cb9237cb0b41f0ab52c3f15ed85517.gif" alt="Demo" title="Inserting current date in Sublime Text"></p>

<p>Done!</p>
]]></description>
    </item>
    
    <item>
      <title>How to list all validators in a Rails model</title>
      <link>https://notes.musayev.com/20230814_4433/rails-model-validators-list</link>
      <guid>20230814_4433</guid>
      <description><![CDATA[<p>Rails models have a <a href="https://api.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html#method-i-validators"><code>validators</code></a> class method. It comes in handy to review validation rules distributed over multiple classes and modules in a larger codebase.</p>

<p>Official example:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="k">class</span> <span class="nc">Person</span>
  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Validations</span>

  <span class="n">validates_with</span> <span class="no">MyValidator</span>
  <span class="n">validates_with</span> <span class="no">OtherValidator</span><span class="p">,</span> <span class="ss">on: :create</span>
  <span class="n">validates_with</span> <span class="no">StrictValidator</span><span class="p">,</span> <span class="ss">strict: </span><span class="kp">true</span>
<span class="k">end</span>

<span class="no">Person</span><span class="p">.</span><span class="nf">validators</span>
<span class="c1"># =&gt; [</span>
<span class="c1">#      #&lt;MyValidator:0x007fbff403e808 @options={}&gt;,</span>
<span class="c1">#      #&lt;OtherValidator:0x007fbff403d930 @options={on: :create}&gt;,</span>
<span class="c1">#      #&lt;StrictValidator:0x007fbff3204a30 @options={strict:true}&gt;</span>
<span class="c1">#    ]</span>
</code></pre></div>
<p>There is also <a href="https://api.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html#method-i-validators_on"><code>#validators_on(:attribute)</code></a> to fetch attribute-specific validators.</p>

<p>References:</p>

<ul>
<li><a href="https://api.rubyonrails.org/classes/ActiveModel/Validations/ClassMethods.html#method-i-validators"><code>ActiveModel::Validations::ClassMethods</code></a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Reset Bluetooth on macOS to prevent headphones from disconnecting</title>
      <link>https://notes.musayev.com/20230811_4427/slug</link>
      <guid>20230811_4427</guid>
      <description><![CDATA[<p>This command helped to fix an issue with spontaneous headphones disconnection on macOS Ventura. Disconnections were repeating every minute or so.</p>
<div class="highlight"><pre class="highlight shell"><code><span class="nb">sudo </span>pkill coreaudiod
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>How to push git tags</title>
      <link>https://notes.musayev.com/20230811_4426/git-push-tags</link>
      <guid>20230811_4426</guid>
      <description><![CDATA[<p><code>git push</code> does not push tags by default. You need to explicitly specify a tag name to push like it was a branch:</p>
<div class="highlight"><pre class="highlight shell"><code>git tag <span class="nt">-a</span> TAG_NAME <span class="nt">-m</span> <span class="s2">"Optional tag message"</span>
git push origin TAG_NAME
</code></pre></div>
<p>Pushing all tags (may cause a mess):</p>
<div class="highlight"><pre class="highlight shell"><code>git push <span class="nt">--dry-run</span> <span class="nt">--tags</span> origin
</code></pre></div>
<p>Preview tags push with dry run:</p>
<div class="highlight"><pre class="highlight shell"><code>git push <span class="nt">--dry-run</span> <span class="nt">--tags</span> origin
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">Git Basics - Tagging</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Starting a new git branch in the past</title>
      <link>https://notes.musayev.com/20230810_4418/starting-git-branch-in-the-past</link>
      <guid>20230810_4418</guid>
      <description><![CDATA[<p>Imagine you started working on a new feature and realized you didn&#39;t start a new branch, so all your recent commits accidentally went to <code>main</code>. I do this all the time.</p>

<p>If you didn&#39;t push your working branch to the upstream, there is an easy fix.</p>

<p>First, create a new feature branch from the <code>HEAD</code>:</p>
<div class="highlight"><pre class="highlight shell"><code>git checkout <span class="nt">-b</span> new-branch-name
</code></pre></div>
<p>Then move your integration branch to the past (assuming the branch name is <code>main</code>, and you want to start <code>new-branch-name</code> 3 commits ago from the <code>HEAD</code>):</p>
<div class="highlight"><pre class="highlight shell"><code>git branch <span class="nt">-f</span> main HEAD~3
</code></pre></div>
<p><code>HEAD~3</code> means &quot;third last commit from the HEAD&quot; (if <code>HEAD</code> is your current checked-out commit, HEAD~1 is the previous one, etc.).</p>

<p>The alternative syntax for this example is <code>HEAD~~~</code>. It can be easier to type unless you must go too deep into the past.</p>

<p>It becomes more tricky if you merge something in the recent commit history. Git provides a <code>^</code> (caret) shortcut for ancestry reference in the case of multiple parent revisions. But I&#39;d prefer ordinary commit ids. It is not as easy to mess up compared to caret syntax.</p>

<p>References:</p>

<ul>
<li><a href="https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection">Git Tools - Revision Selection</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Reapplying Rails DB migration</title>
      <link>https://notes.musayev.com/20230809_4414/reapplying-rails-db-migration</link>
      <guid>20230809_4414</guid>
      <description><![CDATA[<p>It is a quite often situation when an issue in new DB migration becomes apparent immediately after you just executed <code>db:migrate</code>.</p>

<p>Before the migration finds its way to the integration branch, fixing it in place is okay. It is much better than creating more follow-up migrations turning some trivial DB table creation into an unreadable mess.</p>

<p>Here is a bash oneliner to re-apply the last migration. It will revert one most recent migration and then execute <code>db:migrate</code> again for development and test environments:</p>
<div class="highlight"><pre class="highlight shell"><code>rails db:rollback db:migrate <span class="o">&amp;&amp;</span> <span class="nv">RAILS_ENV</span><span class="o">=</span><span class="nb">test </span>rails db:rollback db:migrate
</code></pre></div>
<p>It can live in <code>bin/reapply_last_migration</code> and occasionally save you a minute.</p>
]]></description>
    </item>
    
    <item>
      <title>Why not to write things on the internet</title>
      <link>https://notes.musayev.com/20230808_4403/why-not-to-write</link>
      <guid>20230808_4403</guid>
      <description><![CDATA[<p>Okay, let&#39;s delve into a thoughtful exploration of why one might consider refraining from online authorship. Here are some reasons not to write on the web:</p>

<ul>
<li>Over time, your writing will become outdated, just like your knowledge and opinions. It will start looking irrelevant and useless even to yourself.</li>
<li>Writing likely won&#39;t bring you immediate rewards, especially if you don&#39;t already have an established following. And let&#39;s be honest. If you&#39;re considering reasons <em>not</em> to start, you probably don&#39;t have an audience yet.</li>
<li>Someone with more expertise might read your post and make fun of you.</li>
<li>Once you understand a topic well enough, writing about it will seem like a waste of time. You might think that most people who need the information already have it or that there are already good resources for learning about it, so why bother adding your take?</li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>On manual labor</title>
      <link>https://notes.musayev.com/20230806_4389/on-manual-labor</link>
      <guid>20230806_4389</guid>
      <description><![CDATA[<p>Avoid unwanted manual labor.</p>
]]></description>
    </item>
    
    <item>
      <title>Downloading CleanShot images with Ruby</title>
      <link>https://notes.musayev.com/20230806_4387/downloading-cleanshot-images-with-ruby</link>
      <guid>20230806_4387</guid>
      <description><![CDATA[<p>In my opinion <a href="https://cleanshot.com/">CleanShot</a> is one of the best screenshot tools for macOS by 2023. I&#39;m using it pretty much every day.</p>

<p>I&#39;m going to integrate CleanShot with my <a href="https://notes.musayev.com/">notes</a> publication script to embed screenshots to Markdown pages.</p>

<p>My desired workflow is to plug CleanShot short URL into my notes using <a href="https://spec.commonmark.org/0.30/#images">Markdown image markup</a>, letting a script to extract actual image URL and do further processing.</p>

<p>Here is a quick example on how to download image file from CleanShot URL:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="nb">require</span> <span class="s2">"http"</span>
<span class="nb">require</span> <span class="s2">"cgi"</span>

<span class="n">cleanshot_url</span> <span class="o">=</span> <span class="s2">"https://share.cleanshot.com/35WJDTGz"</span>

<span class="c1"># Fetch direct image URL</span>
<span class="n">direct_image_url</span> <span class="o">=</span> <span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">cleanshot_url</span><span class="si">}</span><span class="s2">+"</span><span class="p">).</span><span class="nf">headers</span><span class="p">[</span><span class="s2">"Location"</span><span class="p">]</span>

<span class="c1"># Extract image file name from the CleanShot query string</span>
<span class="n">query</span> <span class="o">=</span> <span class="no">URI</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">direct_image_url</span><span class="p">).</span><span class="nf">query</span>
<span class="n">param</span> <span class="o">=</span> <span class="no">CGI</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"response-content-disposition"</span><span class="p">).</span><span class="nf">first</span>
<span class="n">file_name</span> <span class="o">=</span> <span class="no">CGI</span><span class="p">.</span><span class="nf">unescape</span><span class="p">(</span><span class="n">param</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s2">"="</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nf">last</span><span class="p">)</span>

<span class="c1"># Download the image to a file</span>
<span class="n">image_contents</span> <span class="o">=</span> <span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">direct_image_url</span><span class="p">).</span><span class="nf">body</span><span class="p">.</span><span class="nf">to_s</span>
<span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s2">"wb"</span><span class="p">)</span> <span class="p">{</span> <span class="n">_1</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">image_contents</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div>
<p>(Yes, it is possible to avoid third party dependency here by using Ruby&#39;s native <code>Net::HTTP</code> instead of the <code>http</code> gem, but I don&#39;t enjoy pain.)</p>

<p>Let&#39;s add some errors handling and refactor it into a service class:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="nb">require</span> <span class="s2">"http"</span>
<span class="nb">require</span> <span class="s2">"cgi"</span>

<span class="k">class</span> <span class="nc">CleanshotDownloader</span>
  <span class="nb">attr_reader</span> <span class="ss">:cleanshot_url</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">cleanshot_url</span><span class="p">,</span> <span class="ss">file_name: </span><span class="kp">nil</span><span class="p">)</span>
    <span class="vi">@cleanshot_url</span> <span class="o">=</span> <span class="n">cleanshot_url</span>
    <span class="vi">@file_name</span> <span class="o">=</span> <span class="n">file_name</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">download</span>
    <span class="n">response</span> <span class="o">=</span> <span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">direct_image_url</span><span class="p">)</span>
    <span class="k">raise</span> <span class="s2">"error downloading image"</span> <span class="k">unless</span> <span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">.</span><span class="nf">success?</span>
    <span class="no">File</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="s2">"wb"</span><span class="p">)</span> <span class="p">{</span> <span class="n">_1</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">body</span><span class="p">.</span><span class="nf">to_s</span><span class="p">)</span> <span class="p">}</span>
    <span class="n">file_name</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">direct_image_url</span>
    <span class="vi">@direct_image_url</span> <span class="o">||=</span> <span class="k">begin</span>
      <span class="n">response</span> <span class="o">=</span> <span class="no">HTTP</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="s2">"</span><span class="si">#{</span><span class="n">cleanshot_url</span><span class="si">}</span><span class="s2">+"</span><span class="p">)</span>
      <span class="k">raise</span> <span class="s2">"error getting image URL"</span> <span class="k">unless</span> <span class="n">response</span><span class="p">.</span><span class="nf">status</span><span class="p">.</span><span class="nf">redirect?</span>
      <span class="n">response</span><span class="p">.</span><span class="nf">headers</span><span class="p">[</span><span class="s2">"Location"</span><span class="p">]</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">file_name</span>
    <span class="vi">@file_name</span> <span class="o">||=</span> <span class="k">begin</span>
      <span class="n">query</span> <span class="o">=</span> <span class="no">URI</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">direct_image_url</span><span class="p">).</span><span class="nf">query</span>
      <span class="n">param</span> <span class="o">=</span> <span class="no">CGI</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">query</span><span class="p">).</span><span class="nf">fetch</span><span class="p">(</span><span class="s2">"response-content-disposition"</span><span class="p">).</span><span class="nf">first</span>
      <span class="no">CGI</span><span class="p">.</span><span class="nf">unescape</span><span class="p">(</span><span class="n">param</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s2">"="</span><span class="p">,</span> <span class="mi">2</span><span class="p">).</span><span class="nf">last</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>Usage example:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="no">CleanshotDownloader</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="s2">"https://share.cleanshot.com/35WJDTGz"</span><span class="p">).</span><span class="nf">download</span>
<span class="c1"># =&gt; "CleanShot 2023-08-06 at 15.27.35.jpeg"</span>
</code></pre></div>
<p>And a spec with fancy <a href="https://rubygems.org/gems/webmock">WebMock</a> stubs:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="no">RSpec</span><span class="p">.</span><span class="nf">describe</span> <span class="no">CleanshotDownloader</span> <span class="k">do</span>
  <span class="n">subject</span><span class="p">(</span><span class="ss">:service_call</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">cleanshot_url</span><span class="p">).</span><span class="nf">download</span> <span class="p">}</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:cleanshot_url</span><span class="p">)</span> <span class="p">{</span> <span class="s2">"https://share.cleanshot.com/80085"</span> <span class="p">}</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:direct_image_url</span><span class="p">)</span> <span class="k">do</span>
    <span class="s2">"https://media.cleanshot.cloud/media/1334/itkYgfyMGKeaUT.jpeg?"</span> <span class="p">\</span>
    <span class="s2">"response-content-disposition=attachment%3Bfilename%3DCleanShot"</span> <span class="p">\</span>
    <span class="s2">"%25202023-08-06%2520at%252015.27.35.jpeg&amp;Expires=1691367016"</span>
  <span class="k">end</span>

  <span class="n">let</span><span class="p">(</span><span class="ss">:image_contents</span><span class="p">)</span> <span class="p">{</span> <span class="n">file_fixture</span><span class="p">(</span><span class="s2">"banana.jpg"</span><span class="p">).</span><span class="nf">read</span> <span class="p">}</span>

  <span class="n">context</span> <span class="s2">"with explicit file name"</span> <span class="k">do</span>
    <span class="n">subject</span><span class="p">(</span><span class="ss">:service_call</span><span class="p">)</span> <span class="p">{</span> <span class="n">described_class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">cleanshot_url</span><span class="p">,</span> <span class="ss">file_name: </span><span class="n">file_name</span><span class="p">).</span><span class="nf">download</span> <span class="p">}</span>

    <span class="n">let</span><span class="p">(</span><span class="ss">:file_name</span><span class="p">)</span> <span class="p">{</span> <span class="no">Tempfile</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">described_class</span><span class="p">.</span><span class="nf">name</span><span class="p">)</span> <span class="p">}</span>

    <span class="n">before</span> <span class="k">do</span>
      <span class="n">stub_cleanshot_url</span><span class="p">.</span><span class="nf">to_return</span><span class="p">(</span><span class="ss">status: </span><span class="mi">302</span><span class="p">,</span> <span class="ss">headers: </span><span class="p">{</span><span class="s2">"Location"</span> <span class="o">=&gt;</span> <span class="n">direct_image_url</span><span class="p">})</span>
      <span class="n">stub_direct_image_url</span><span class="p">.</span><span class="nf">to_return</span><span class="p">(</span><span class="ss">headers: </span><span class="p">{</span><span class="s2">"Content-Type"</span> <span class="o">=&gt;</span> <span class="s2">"image/jpeg"</span><span class="p">},</span> <span class="ss">body: </span><span class="n">image_contents</span><span class="p">)</span>
      <span class="n">service_call</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">file_name</span><span class="p">)).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">image_contents</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"with implicit file name"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="k">do</span>
      <span class="n">stub_cleanshot_url</span><span class="p">.</span><span class="nf">to_return</span><span class="p">(</span><span class="ss">status: </span><span class="mi">302</span><span class="p">,</span> <span class="ss">headers: </span><span class="p">{</span><span class="s2">"Location"</span> <span class="o">=&gt;</span> <span class="n">direct_image_url</span><span class="p">})</span>
      <span class="n">stub_direct_image_url</span><span class="p">.</span><span class="nf">to_return</span><span class="p">(</span><span class="ss">headers: </span><span class="p">{</span><span class="s2">"Content-Type"</span> <span class="o">=&gt;</span> <span class="s2">"image/jpeg"</span><span class="p">},</span> <span class="ss">body: </span><span class="n">image_contents</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">service_call</span><span class="p">).</span><span class="nf">to</span> <span class="n">eq</span><span class="p">(</span><span class="s2">"CleanShot 2023-08-06 at 15.27.35.jpeg"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"with redirect error"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="k">do</span>
      <span class="n">stub_cleanshot_url</span><span class="p">.</span><span class="nf">to_return</span><span class="p">(</span><span class="ss">status: </span><span class="mi">500</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span> <span class="p">{</span> <span class="n">service_call</span> <span class="p">}.</span><span class="nf">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="s2">"error getting image URL"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">context</span> <span class="s2">"with image downloading error"</span> <span class="k">do</span>
    <span class="n">before</span> <span class="k">do</span>
      <span class="n">stub_cleanshot_url</span><span class="p">.</span><span class="nf">to_return</span><span class="p">(</span><span class="ss">status: </span><span class="mi">302</span><span class="p">,</span> <span class="ss">headers: </span><span class="p">{</span><span class="s2">"Location"</span> <span class="o">=&gt;</span> <span class="n">direct_image_url</span><span class="p">})</span>
      <span class="n">stub_direct_image_url</span><span class="p">.</span><span class="nf">to_return</span><span class="p">(</span><span class="ss">status: </span><span class="mi">500</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="n">it</span> <span class="p">{</span> <span class="n">expect</span> <span class="p">{</span> <span class="n">service_call</span> <span class="p">}.</span><span class="nf">to</span> <span class="n">raise_error</span><span class="p">(</span><span class="s2">"error downloading image"</span><span class="p">)</span> <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">stub_cleanshot_url</span>
    <span class="n">stub_request</span><span class="p">(</span><span class="ss">:get</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="n">cleanshot_url</span><span class="si">}</span><span class="s2">+"</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">stub_direct_image_url</span>
    <span class="n">stub_request</span><span class="p">(</span><span class="ss">:get</span><span class="p">,</span> <span class="n">direct_image_url</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>References:</p>

<ul>
<li>CleanShot: <a href="https://cleanshot.com">https://cleanshot.com</a></li>
<li>Markdown reference (CommonMark): <a href="https://commonmark.org/help/">https://commonmark.org/help/</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Filter out specific paths from Recents in macOS Finder</title>
      <link>https://notes.musayev.com/20230806_4381/macos-finder-recents-filter</link>
      <guid>20230806_4381</guid>
      <description><![CDATA[<p><a href="https://apps.apple.com/us/app/arc-app-location-activity/id1063151918">Arc</a> generates a lot of JSON files remaining visible in the &quot;Recents&quot; folder in Finder, making it less usable.</p>

<p>It is possible to filter out specified paths to reduce noise in the Recents:</p>

<ol>
<li>Open System Settings → Siri &amp; Spotlight → Spotlight Privacy...</li>
<li>Add <code>~/Library/Mobile Documents/com~apple~CloudDocs/Arc App</code> to the Privacy list.</li>
<li>Click Done.</li>
</ol>

<p>(I&#39;ve added <code>~/Library/Mobile Documents/</code> since in my opinion, this folder is an ephemeral files dumpster that does not contain anything valuable in general.)</p>

<p><img src="e28f897f968246dbbd45c25aabc3fbf8.jpg" alt="" title=""></p>
]]></description>
    </item>
    
    <item>
      <title>Kill a process that occupies a port</title>
      <link>https://notes.musayev.com/20230806_4380/bash-kill-process-by-port</link>
      <guid>20230806_4380</guid>
      <description><![CDATA[<p>This command lists process ids listening on a specified port:</p>
<div class="highlight"><pre class="highlight shell"><code>lsof <span class="nt">-t</span> <span class="nt">-i</span>:PORT_NUMBER
</code></pre></div>
<p>You can use it to kill processes:</p>
<div class="highlight"><pre class="highlight shell"><code><span class="nb">kill</span> <span class="nt">-9</span> <span class="o">(</span>lsof <span class="nt">-t</span> <span class="nt">-i</span>:PORT_NUMBER<span class="o">)</span>
</code></pre></div>
<p>Here is a Bash function making this command easier to use:</p>
<div class="highlight"><pre class="highlight shell"><code>killport<span class="o">()</span> <span class="o">{</span> <span class="nb">kill</span> <span class="nt">-9</span> <span class="si">$(</span>lsof <span class="nt">-t</span> <span class="nt">-i</span>:<span class="nv">$1</span><span class="si">)</span> <span class="o">}</span>
</code></pre></div>
<p>Usage example:</p>
<div class="highlight"><pre class="highlight shell"><code>killport 3000
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>Customizing enum fields order for ActiveRecord</title>
      <link>https://notes.musayev.com/20230802_4369/rails-order-by-array-position</link>
      <guid>20230802_4369</guid>
      <description><![CDATA[<p>ay, there is an <code>Account</code> model with <code>state</code> string attribute having <code>enabled</code>, <code>suspended</code> or <code>disabled</code> value.</p>

<p>You can use PostgreSQL <code>array_position</code> function to specify the required sorting order like so:</p>
<div class="highlight"><pre class="highlight sql"><code><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">accounts</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">array_position</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="s1">'enabled'</span><span class="p">,</span> <span class="s1">'suspended'</span><span class="p">,</span> <span class="s1">'disabled'</span><span class="p">],</span> <span class="n">accounts</span><span class="p">.</span><span class="k">state</span><span class="p">)</span>
</code></pre></div>
<p>The same query in Rails:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="no">Account</span><span class="p">.</span><span class="nf">order</span><span class="p">(</span><span class="no">Arel</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="s2">"array_position(ARRAY['enabled' 'suspended', 'disabled'], state::text)"</span><span class="p">))</span>

<span class="no">Account</span><span class="p">.</span><span class="nf">pluck</span><span class="p">(</span><span class="ss">:state</span><span class="p">).</span><span class="nf">tally</span>
<span class="c1"># =&gt; {"enabled"=&gt;45, "disabled"=&gt;21, "suspended"=&gt;5}</span>

<span class="no">Account</span><span class="p">.</span><span class="nf">order</span><span class="p">(</span><span class="no">Arel</span><span class="p">.</span><span class="nf">sql</span><span class="p">(</span><span class="s2">"array_position(ARRAY['disabled', 'suspended'], state::text)"</span><span class="p">)).</span><span class="nf">pluck</span><span class="p">(</span><span class="ss">:state</span><span class="p">)</span>
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://pgpedia.info/a/array_position.html"><code>array_position()</code></a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>3-4-5 Method</title>
      <link>https://notes.musayev.com/20230730_4361/345-method</link>
      <guid>20230730_4361</guid>
      <description><![CDATA[<p>&quot;3-4-5 method&quot; is a way to ensure a right angle without using a reference square:</p>

<p><img src="6c53cf1f2916480f9574471f64a7640b.jpg" alt="" title=""></p>

<p>References:</p>

<ul>
<li><a href="https://www.fao.org/3/R7021E/r7021e05.htm">Irrigation Water Management: Training Manual No. 2 - Elements of Topographic Surveying</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Updating Ruby with asdf</title>
      <link>https://notes.musayev.com/20230725_4324/updating-ruby-with-asdf</link>
      <guid>20230725_4324</guid>
      <description><![CDATA[<p>Assuming, it is macOS, and <code>asdf</code> was installed with Homebrew.</p>
<div class="highlight"><pre class="highlight shell"><code>brew update
asdf plugin update ruby
asdf <span class="nb">install </span>ruby 3.2.2
</code></pre></div>
<p>In case <code>asdf</code> was installed manually, use this instead of the brew commend to update to the lates stable release:</p>
<div class="highlight"><pre class="highlight shell"><code>asdf update
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://asdf-vm.com/"><code>asdf</code></a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Reading list</title>
      <link>https://notes.musayev.com/20230724_4313/readlist</link>
      <guid>20230724_4313</guid>
      <description><![CDATA[<p class="text-muted">A copy of each book is in the Dropbox, and it is searchable by title.</p>

<p>2023:</p>

<ul>
<li>Быть собой: Новая теория сознания (Анил Сет)</li>
<li>The Creative Act: A Way of Being (Rick Rubin) [<a href="https://www.abebooks.com/servlet/SearchResults?isbn=0593652886&clickid=RwHxaRzPsxyPRp40SdwIk1m9UkF3lMzH40UcVY0&cm_mmc=aff-_-ir-_-64613-_-77416&ref=imprad64613&afn_sr=impact&ref_=aff_ir_64613_77416">1</a>] [<a href="https://www.goodreads.com/book/show/60965426-the-creative-act">2</a>]</li>
</ul>

<p>2022:</p>

<ul>
<li>Clean Code, Code of conduct (Robert Martin)</li>
<li>Sustainable Web Development with Ruby on Rails (David Bryant Copeland)</li>
<li>Resilient management (Lara Hogan)</li>
<li>Век тревожности (Скотт Стоссел)</li>
<li>Почему я отвлекаюсь (Эдвард Хэлловэлл, Джон Рэйти)</li>
<li>The Art of Learning (Josh waitzkin)</li>
<li>Книга ленивого гуру (Лоуренс Шортер)</li>
<li>Junior to Senior (Yuri Karabatov)</li>
</ul>

<p>2021:</p>

<ul>
<li>Designing DataIntensive Applications (Martin Kleppmann)</li>
<li>Go Recipes (Shiju Varghese)</li>
<li>Go Design Patterns (Mario Castro Contreras)</li>
<li>The Little Book of Stoicism (Jonas Salzgeber)</li>
<li>Structure and Interpretation of Computer Programs</li>
<li>The Art of PostgreSQL (Dimitri Fontaine)</li>
<li>Webapps in Go, the anti textbook (Suraj Patil)</li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Preserving backtrace during exceptions wrapping in Ruby</title>
      <link>https://notes.musayev.com/20230723_4310/preserving-ruby-exception-backtrace</link>
      <guid>20230723_4310</guid>
      <description><![CDATA[<p>In this example raising a <code>CustomError</code> hides the original error backtrace.</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="no">CustomError</span> <span class="o">=</span> <span class="no">Class</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="no">StandardError</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">raise_error</span>
  <span class="k">raise</span> <span class="no">StandardError</span><span class="p">,</span> <span class="s2">"Original error"</span> <span class="c1"># line 4</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">call_the_error_raiser</span>
  <span class="n">raise_error</span> <span class="c1"># line 8</span>
<span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="k">raise</span> <span class="no">CustomError</span><span class="p">,</span> <span class="s2">"Error message"</span>
<span class="k">end</span>

<span class="k">begin</span>
  <span class="n">call_the_error_raiser</span> <span class="c1"># line 14</span>
<span class="k">rescue</span> <span class="no">StandardError</span> <span class="o">=&gt;</span> <span class="n">e</span>
  <span class="nb">puts</span> <span class="n">e</span><span class="p">.</span><span class="nf">inspect</span>
  <span class="nb">puts</span> <span class="n">e</span><span class="p">.</span><span class="nf">backtrace</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">"</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>Output (the cause of the original error is lost):</p>
<div class="highlight"><pre class="highlight plaintext"><code>#&lt;CustomError: Error message&gt;
preserve_error_backtrace.rb:10:in `rescue in call_the_error_raiser'
preserve_error_backtrace.rb:7:in `call_the_error_raiser'
preserve_error_backtrace.rb:14:in `&lt;main&gt;'
</code></pre></div>
<p>You can still access the &quot;Original error&quot; backtrace via <a href="https://ruby-doc.org/3.2.2/Exception.html#method-i-cause"><code>Exception#cause</code></a>, but it may be better to preserve the original while raising the custom error, instead of generating a new non-helpful backtrace:</p>
<div class="highlight"><pre class="highlight ruby"><code><span class="k">raise</span> <span class="no">CustomError</span><span class="p">,</span> <span class="s2">"Error message"</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="nf">backtrace</span>
</code></pre></div>
<p>Output (the cause of the original error is on the first line):</p>
<div class="highlight"><pre class="highlight plaintext"><code>#&lt;CustomError: Error message&gt;
preserve_error_backtrace.rb:4:in `raise_error' ← The cause of the error
preserve_error_backtrace.rb:8:in `call_the_error_raiser'
preserve_error_backtrace.rb:14:in `&lt;main&gt;'
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://www.honeybadger.io/blog/nested-errors-in-ruby-with-exception-cause/">Nested errors in Ruby with Exception#cause</a> at Honeybadger blog</li>
<li><a href="https://ruby-doc.org/3.2.2/Exception.html#method-i-cause"><code>Exception#cause</code> docs</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Honeybadger deployment notification with curl</title>
      <link>https://notes.musayev.com/20230720_4288/honeybadger-deployment-notification</link>
      <guid>20230720_4288</guid>
      <description><![CDATA[<p>Shell command to tell Honeybadger about a new deployment:</p>
<div class="highlight"><pre class="highlight shell"><code>curl <span class="nt">--data</span> <span class="s2">"deploy[revision]=</span><span class="si">$(</span><span class="nb">date</span> <span class="nt">-u</span> +%Y%m%d%H%M%S<span class="si">)</span><span class="s2">_</span><span class="si">$(</span>git rev-parse <span class="nt">--short</span> HEAD<span class="si">)</span><span class="s2">&amp;api_key=</span><span class="nv">$HONEYBADGER_API_KEY</span><span class="s2">"</span> <span class="s2">"https://api.honeybadger.io/v1/deploys"</span>
</code></pre></div>
<p>Params:</p>

<ul>
<li><code>$REVISION</code> - revision id. can be an arbitrary string value. In this example revision id is based on current timestamp (presumable date and time of deployment) and head revision id for the current working copy. Example: <code>20230723092717_00a9703</code>.</li>
<li><code>$HONEYBADGER_API_KEY</code> - Honeybadger API key.</li>
</ul>

<p>Getting Honeybadger API key:</p>

<p>Project page → Settings → API keys</p>

<p><img src="43688db1c5854f1a8382a311bd0dc72b.jpg" alt="" title=""></p>

<p>Ansible task:</p>
<div class="highlight"><pre class="highlight yaml"><code><span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">clone or update sources</span>
  <span class="na">ansible.builtin.git</span><span class="pi">:</span>
    <span class="c1"># ...</span>
  <span class="na">register</span><span class="pi">:</span> <span class="s">git_result</span>

<span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">notify honeybadger.io about the deployment</span>
  <span class="na">community.general.honeybadger_deployment</span><span class="pi">:</span>
    <span class="na">token</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{lookup('env',</span><span class="nv"> </span><span class="s">'HONEYBADGER_API_KEY')}}"</span>
    <span class="na">environment</span><span class="pi">:</span> <span class="s2">"</span><span class="s">production"</span>
    <span class="na">user</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ansible"</span>
    <span class="na">revision</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{git_result.after}}"</span>
    <span class="na">repo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{{git_url}}"</span>
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://docs.honeybadger.io/api/reporting-deployments/">Honeybadger docs</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Github backup</title>
      <link>https://notes.musayev.com/20230718_4279/github-backup</link>
      <guid>20230718_4279</guid>
      <description><![CDATA[<p>Here is a script to create local snapshots for Github repos. It&#39;s always nice to have one for good measure.</p>

<p>It requires <a href="https://github.com/josegonzalez/python-github-backup"><code>github-backup</code></a> to be installed:</p>
<div class="highlight"><pre class="highlight shell"><code>brew <span class="nb">install </span>github-backup
</code></pre></div><div class="highlight"><pre class="highlight shell"><code><span class="c">#!/usr/bin/env bash</span>

<span class="nb">set</span> <span class="nt">-e</span> <span class="nt">-x</span>

<span class="c"># Github repos will be cloned in subdirectories here</span>
<span class="nv">GITHUB_BACKUP_PATH</span><span class="o">=</span>~/github-backup

<span class="c"># Archived repo snapshots will live here</span>
<span class="nv">ARCHIVE_PATH</span><span class="o">=</span>~/Yandex.Disk.localized/

<span class="nv">CURRENT_DATE</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span>

<span class="k">function </span>backup<span class="o">()</span> <span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"---&gt; </span><span class="nv">$1</span><span class="s2">/</span><span class="nv">$2</span><span class="s2">"</span>

  github-backup <span class="se">\</span>
    <span class="nt">--incremental</span> <span class="se">\</span>
    <span class="nt">--repository</span> <span class="nv">$2</span> <span class="se">\</span>
    <span class="nt">--repositories</span> <span class="se">\</span>
    <span class="nt">--token</span> <span class="nv">$GITHUB_BACKUP_TOKEN</span> <span class="se">\</span>
    <span class="nt">--output-directory</span> <span class="nv">$GITHUB_BACKUP_PATH</span>/<span class="nv">$1</span>/<span class="nv">$2</span> <span class="se">\</span>
    <span class="nt">--starred</span> <span class="se">\</span>
    <span class="nt">--followers</span> <span class="se">\</span>
    <span class="nt">--following</span> <span class="se">\</span>
    <span class="nt">--issues</span> <span class="se">\</span>
    <span class="nt">--issue-comments</span> <span class="se">\</span>
    <span class="nt">--pulls</span> <span class="se">\</span>
    <span class="nt">--pull-comments</span> <span class="se">\</span>
    <span class="nt">--pull-commits</span> <span class="se">\</span>
    <span class="nt">--pull-details</span> <span class="se">\</span>
    <span class="nt">--labels</span> <span class="se">\</span>
    <span class="nt">--wikis</span> <span class="se">\</span>
    <span class="nt">--gists</span> <span class="se">\</span>
    <span class="nt">--private</span> <span class="se">\</span>
    <span class="nt">--fork</span> <span class="se">\</span>
    <span class="nt">--releases</span> <span class="se">\</span>
    <span class="nv">$1</span>

  <span class="nv">ARCHIVE_FILE</span><span class="o">=</span><span class="nv">$ARCHIVE_PATH</span>/<span class="nv">$CURRENT_DATE</span>/<span class="nv">$CURRENT_DATE</span>-<span class="nv">$1</span>-<span class="nv">$2</span>.tar.gz
  <span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$ARCHIVE_PATH</span>/<span class="nv">$CURRENT_DATE</span>
  <span class="nb">tar</span> <span class="nt">--verbose</span> <span class="nt">-cz</span> <span class="nt">-f</span> <span class="nv">$ARCHIVE_FILE</span> <span class="nv">$GITHUB_BACKUP_PATH</span>/<span class="nv">$1</span>/<span class="nv">$2</span>
<span class="o">}</span>

<span class="c"># Usage: backup &lt;username-or-organization&gt; &lt;repo-name&gt;</span>

backup dreikanter notes
<span class="c"># Add more repos here</span>
</code></pre></div>
<p>Upload backup files to the cloud with <a href="https://rclone.org/"><code>rclone</code></a>:</p>
<div class="highlight"><pre class="highlight shell"><code>rclone <span class="nb">sync</span> <span class="nt">--verbose</span><span class="o">=</span>3 <span class="nt">--interactive</span> <span class="nv">$ARCHIVE_PATH</span> remote:github-backup
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>RSpec snippet for Sublime Text</title>
      <link>https://notes.musayev.com/20230713_4251/rspec-snippet-for-sublime-text</link>
      <guid>20230713_4251</guid>
      <description><![CDATA[<p>Sublime Text snippet to create a blank RSpec spec:</p>
<div class="highlight"><pre class="highlight xml"><code><span class="nt">&lt;snippet&gt;</span>
  <span class="nt">&lt;content&gt;</span><span class="cp">&lt;![CDATA[
RSpec.describe ${1:subject_class} do
  subject(:${2:subject_name}) { described_class }
end
]]&gt;</span><span class="nt">&lt;/content&gt;</span>
  <span class="nt">&lt;tabTrigger&gt;</span>spec<span class="nt">&lt;/tabTrigger&gt;</span>
  <span class="nt">&lt;scope&gt;</span>source.ruby<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/snippet&gt;</span>
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>Migrating PostgreSQL database with pg_dump</title>
      <link>https://notes.musayev.com/20230627_4185/migrating-postgresql-database-with-pg-dump</link>
      <guid>20230627_4185</guid>
      <description><![CDATA[<p>Dump and compress DB on the source server:</p>
<div class="highlight"><pre class="highlight shell"><code>pg_dump <span class="nt">--username</span><span class="o">=</span>DB_USER <span class="nt">--format</span><span class="o">=</span>custom <span class="nt">--compress</span><span class="o">=</span>9  <span class="nt">--file</span><span class="o">=</span>DB_NAME.dump  DB_NAME
</code></pre></div>
<p>(To generate dump file name dynamically, use <code>--file=$(date +%Y%m%d)_DB_NAME.dump</code>. Could be helpful for backup scenarios.)</p>

<p>Download the dump to the target DB server:</p>
<div class="highlight"><pre class="highlight shell"><code>scp <span class="nt">-i</span> ~/.ssh/PRIVATE_KEY USER@HOST:DB_NAME.dump ~/
</code></pre></div>
<p>Restore the dump on the new server:</p>
<div class="highlight"><pre class="highlight shell"><code>pg_restore <span class="nt">--username</span><span class="o">=</span>DB_USER <span class="nt">--create</span> <span class="nt">--dbname</span><span class="o">=</span>DB_NAME DB_NAME.dump
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>Installing headless Chrome on Ubuntu</title>
      <link>https://notes.musayev.com/20230625_4177/install-chrome-headless</link>
      <guid>20230625_4177</guid>
      <description><![CDATA[<p>Install Chromium (headless Chrome) on Ubuntru</p>
<div class="highlight"><pre class="highlight shell"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>software-properties-common
<span class="nb">sudo </span>add-apt-repository ppa:canonical-chromium-builds/stage
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>chromium-browser
</code></pre></div>
<p>Creating screenshot:</p>
<div class="highlight"><pre class="highlight shell"><code>chromium-browser <span class="nt">--headless</span> <span class="nt">--hide-scrollbars</span> <span class="nt">--no-sandbox</span> <span class="nt">--window-size</span><span class="o">=</span>1280,1024 <span class="nt">--screenshot</span><span class="o">=</span>screenshot.pdf http://example.org/
</code></pre></div>
<p>Saving a page to PDF:</p>
<div class="highlight"><pre class="highlight shell"><code>chromium-browser <span class="nt">--headless</span> <span class="nt">--hide-scrollbars</span> <span class="nt">--print-to-pdf</span><span class="o">=</span>page.pdf https://example.com/
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://chromium.woolyss.com/">https://chromium.woolyss.com/</a></li>
<li><a href="https://gist.github.com/addyosmani/5336747">https://gist.github.com/addyosmani/5336747</a></li>
<li><a href="https://askubuntu.com/questions/79280/how-to-install-chrome-browser-properly-via-command-line">https://askubuntu.com/questions/79280/how-to-install-chrome-browser-properly-via-command-line</a></li>
<li><a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md">https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Check host connection with Ansible</title>
      <link>https://notes.musayev.com/20230625_4175/ansible-ping</link>
      <guid>20230625_4175</guid>
      <description><![CDATA[<p>A command line for the basic use case when you need to check connection for all hosts in a specified inventory file:</p>
<div class="highlight"><pre class="highlight shell"><code>ansible all <span class="nt">--inventory</span> INVENTORY_FILE <span class="nt">--user</span> REMOTE_USER <span class="nt">--module-name</span> ping
</code></pre></div>
<p>Short version:</p>
<div class="highlight"><pre class="highlight shell"><code>ansible all <span class="nt">-i</span> INVENTORY_FILE <span class="nt">-u</span> REMOTE_USER <span class="nt">-m</span> ping
</code></pre></div>
<p>Drop <code>--user</code> if it present in the Ansible configuration file.</p>

<p>Example:</p>
<div class="highlight"><pre class="highlight shell"><code>ansible all <span class="nt">-i</span> ./inventory/production <span class="nt">-m</span> ping
</code></pre></div>
<p>Sample output:</p>
<div class="highlight"><pre class="highlight plaintext"><code>X.X.X.X | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
Y.Y.Y.Y | SUCCESS =&gt; {
    "changed": false,
    "ping": "pong"
}
</code></pre></div>
<p>References:</p>

<ul>
<li><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_patterns.html#using-patterns">Using Ansible hosts pattern</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html">Ansible inventory</a></li>
<li><a href="https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ping_module.html">Ansible Ping module</a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Rails class_names helper</title>
      <link>https://notes.musayev.com/20230622_4169/rails-class-names</link>
      <guid>20230622_4169</guid>
      <description><![CDATA[<p><a href="https://www.rubydoc.info/docs/rails/ActionView%2FHelpers%2FTagHelper:class_names"><code>class_names</code></a> is a neat helper method for CSS class names.</p>

<p>It merges the class names list into a string, supporting optional conditions. Very similar to the <a href="https://www.npmjs.com/package/classnames"><code>classNames</code></a> JS function.</p>

<p>The example from <a href="https://github.com/rails/rails/pull/37918">the PR</a> demonstrates the way a new helper improves readability for a conditional class names generation in a view:</p>

<p>Before:</p>
<div class="highlight"><pre class="highlight html"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"&lt;%= item.for_sale? ? 'active' : '' %&gt;"</span><span class="nt">&gt;</span>
</code></pre></div>
<p>After:</p>
<div class="highlight"><pre class="highlight html"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"&lt;%= class_names(active: item.for_sale?) %&gt;"</span><span class="nt">&gt;</span>
</code></pre></div>
<p><code>class_names</code> is an alias to the more generic <code>token_list</code> that must be a semantic generalization for non-CSS use cases.</p>

<p>References:</p>

<ul>
<li>Rails API docs: <a href="https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-class_names"><code>ActionView::Helpers::TagHelper#class_names</code></a></li>
</ul>
]]></description>
    </item>
    
    <item>
      <title>Getting head revision id from Git</title>
      <link>https://notes.musayev.com/20230620_4165/git-head-revision-id</link>
      <guid>20230620_4165</guid>
      <description><![CDATA[<p>Getting git commit id for the <code>HEAD</code> revision in a specific working directory, without changing current directory:</p>
<div class="highlight"><pre class="highlight shell"><code>git <span class="nt">-C</span> ~/public_notes rev-parse HEAD
</code></pre></div>
<p>Output example:</p>
<div class="highlight"><pre class="highlight shell"><code>bf27c74435e836ef3ef43ccc4e01d3e4fd708201
</code></pre></div>
<p>Short id:</p>
<div class="highlight"><pre class="highlight shell"><code>git <span class="nt">-C</span> ~/public_notes rev-parse <span class="nt">--short</span> HEAD
</code></pre></div>
<p>Output example:</p>
<div class="highlight"><pre class="highlight shell"><code>bf27c74
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>Public notes purpose</title>
      <link>https://notes.musayev.com/20230620_4164/public-notes-purpose</link>
      <guid>20230620_4164</guid>
      <description><![CDATA[<p>The goal of this initiative is to develop and maintain writing skill by practice.</p>
]]></description>
    </item>
    
    <item>
      <title>Updating gems</title>
      <link>https://notes.musayev.com/20230618_4153/updating-gems</link>
      <guid>20230618_4153</guid>
      <description><![CDATA[<p>I&#39;m updating gems regularly for <code>\d\d</code> years now, but it is still hard to remember related commands. Should I use <code>gem</code> or <code>bundle</code> to upgrade <code>bundle</code>? Is it &quot;update&quot; or &quot;upgrade&quot;? Bwagh!</p>

<p><strong>Updating Bundler:</strong></p>
<div class="highlight"><pre class="highlight shell"><code>bundle update <span class="nt">--bundler</span>
</code></pre></div>
<p>Note: <code>Gemfile.lock</code> may lock Bundler version with <code>BUNDLED WITH</code> value. Also it may cause to alternative bundler version installation during <code>bundle install</code>.</p>

<p>Check current version with <code>bundle --version</code>.</p>

<p><strong>Update system gems:</strong></p>
<div class="highlight"><pre class="highlight shell"><code>gem update <span class="nt">--system</span>
</code></pre></div>
<p><strong>Getting gem paths and other environment variables:</strong></p>
<div class="highlight"><pre class="highlight shell"><code>gem <span class="nb">env</span>
</code></pre></div>]]></description>
    </item>
    
    <item>
      <title>Publishing notes</title>
      <link>https://notes.musayev.com/20230526_4105/publishing-notes</link>
      <guid>20230526_4105</guid>
      <description><![CDATA[<p>Knowing that others can read your notes is enough to</p>

<ul>
<li>make your writing more thoughtful,</li>
<li>motivate fact checking and adding references,</li>
<li>get deeper understanding of the subject,</li>
<li>and proofread everything thoroughly.</li>
</ul>

<p>If you make your knowledge public, you learn better. This alone is a sufficient reason for the personal notes publication.</p>
]]></description>
    </item>
    
  </channel>
</rss>
